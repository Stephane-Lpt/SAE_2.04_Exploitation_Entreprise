DROP TABLE CLIENT CASCADE constraints;
DROP TABLE APPARTEMENT CASCADE constraints;
DROP TABLE PROPRIETAIRE CASCADE constraints;
DROP TABLE SERVICE CASCADE constraints;
DROP TABLE POSSEDE CASCADE constraints;
DROP TABLE RESERVATION CASCADE constraints;
DROP TABLE CHOIXOPTION CASCADE constraints;


-- On crée toutes les autres tables à partir de ensinfo puisqu'on en a les privilèges
create table APPARTEMENT as select * from ensinfo.appartement;
create table PROPRIETAIRE as select * from ensinfo.proprietaire;
create table CLIENT as select * from ensinfo.client;
create table SERVICE as select * from ensinfo.service;
create table POSSEDE as select * from ensinfo.possede;
create table RESERVATION as select * from ensinfo.reservation;
create table CHOIXOPTION as select * from ensinfo.choixoption;



-- Puis on s'occupe de toutes les contraintes de clés étrangères et primaires
ALTER TABLE APPARTEMENT ADD CONSTRAINT PKAppartement PRIMARY KEY (numAppart);
ALTER TABLE PROPRIETAIRE ADD CONSTRAINT PKProprietaire PRIMARY KEY (numProp);
ALTER TABLE RESERVATION ADD CONSTRAINT PKReservation PRIMARY KEY (numRes);
ALTER TABLE CLIENT ADD CONSTRAINT PKClient PRIMARY KEY (numCli);
ALTER TABLE SERVICE ADD CONSTRAINT PKService PRIMARY KEY (codeS);

ALTER TABLE POSSEDE ADD CONSTRAINT PKPossede PRIMARY KEY(numAppart, numProp);
ALTER TABLE POSSEDE ADD CONSTRAINT FKnumAppart FOREIGN KEY (numAppart) REFERENCES APPARTEMENT(numAppart);
ALTER TABLE POSSEDE ADD CONSTRAINT FKnumProp FOREIGN KEY (numProp) REFERENCES PROPRIETAIRE(numProp);

ALTER TABLE CHOIXOPTION ADD CONSTRAINT PKChoixOption PRIMARY KEY(numRes, codeS);
ALTER TABLE CHOIXOPTION ADD CONSTRAINT FKnumRes FOREIGN KEY (numRes) REFERENCES RESERVATION(numRes);
ALTER TABLE CHOIXOPTION ADD CONSTRAINT FKcodeS FOREIGN KEY (codeS) REFERENCES SERVICE(codeS);


-- Question 6 :
/*
SELECT DISTINCT adr from appartement order by adr;
SELECT numappart from appartement where adr = 'Biarritz';
*/
DECLARE
    Cursor cappartement is SELECT DISTINCT adr from appartement order by adr;
    Cursor cnumappart(pville VARCHAR) is select * from appartement where adr = pville;
BEGIN
    for cappartement_rec in cappartement loop
        for cnumappart_rec in cnumappart(cappartement_rec.adr) loop
            dbms_output.put_line(cnumappart_rec.numappart || ' ' || cnumappart_rec.nbpiece || ' ' || cnumappart_rec.etage || ' ' || cnumappart_rec.nbpersmax || ' ' || cnumappart_rec.tarifhs || ' ' || cnumappart_rec.tarifbs || ' ' || cnumappart_rec.typeappt || ' ' || cnumappart_rec.adr);
        end loop;
    end loop;
END;

-- Question 7 : 

-- Question 9 : 
CREATE OR REPLACE
FUNCTION montOption(pnumres varchar) RETURN NUMBER --Création de la fonction qui prend en entrée un numéro de réservation et renvoie le montant hors taxe pour la partie hébergement du séjour.
IS
montantHT NUMBER(5) := 0;
Cursor cChoixOption is SELECT * from service s 
                            inner join choixOption c on s.codes = c.codes
                            inner join reservation r on r.numres = c.numres
                            where c.numres = pnumres;
BEGIN
for cChoixOption_rec in cChoixOption loop
-- On parcours le curseur remplie de tous les services demandés lors de la réservation
    if cChoixOption_rec.tarifenf IS NULL then
    -- Si le service est le ménage ou le linge (cela veut dire qu'il n'y a pas de réduction pour les enfants par conséquent) donc on peut filtrer avec le tarifenf qui est null
        if cChoixOption_rec.forfait = 'sem' then
        -- Si le forfait est semaine
            montantHT := montantHT + cChoixOption_rec.duree * cChoixOption_rec.tarifsem;
        else
        -- Si le forfait est jour
            montantHT := montantHT + cChoixOption_rec.nbjour * cChoixOption_rec.tarifjour;
        end if;
    else
    -- Si le service est individuel
        if cChoixOption_rec.forfait = 'sem' then
        -- Si le forfait est semaine
            montantHT := montantHT + cChoixOption_rec.duree * cChoixOption_rec.tarifsem * cChoixOption_rec.nbadult + cChoixOption_rec.duree * cChoixOption_rec.tarifsem * cChoixOption_rec.nbenf * cChoixOption_rec.tarifenf;
        else
        -- Si le forfait est jour
            montantHT := montantHT + cChoixOption_rec.nbjour * cChoixOption_rec.tarifjour * cChoixOption_rec.nbadult + cChoixOption_rec.nbjour * cChoixOption_rec.tarifjour * cChoixOption_rec.nbenf * cChoixOption_rec.tarifenf;
        end if;
    end if;
end loop;
return montantHT;

EXCEPTION

    When NO_DATA_FOUND then
        return 0; -- Si jamais le numéro de réservation n'existe pas
        
END montOption;

DECLARE
BEGIN
    dbms_output.put_line(montOption(170));
END;

-- Question 11 : 
CREATE OR REPLACE
PROCEDURE ajouterFacture(vnumRes reservation.numRes%type)
IS
    vnumFacture char;
    vmontantLocation number(9, 2);
    vmontantOption number(9, 2);
    vmontantTotale number(9, 2);
    vmontantTTC number(9, 2);
    vremise number;
    vnb number;
    vnb2 number;
    vnb3 number;
    FactureExistante exception;
    ReservationInconnue exception;

BEGIN
    -- vérifie si la réservation a déjà eu une facture  
    select count(*) into vnb3
    from facture
    where numRes = vnumRes;

    if(vnb != 0) then
        raise FactureExistante;
    end if;

    -- vérifie si la réservation existe
    select count(*) into vnb
    from reservation
    where numRes = vnumRes;

    -- si la réservation existe alors on récupère toutes les informations
    if vnb = 0 then
        raise ReservationInconnue;
    else 
        -- Le nouveau numéro de facture
        select max(numFact) + 1 into vnumFacture
        from facture;

        -- On calcule le montant de l'hébergement
        select montHebergement(vnumRes) into vmontantLocation
        from reservation;

        -- On calcule le montant des options
        select montOption(vnumRes) into vmontantOption
        from choixOption;

        -- On calcule le montant total
        vmontantTotale := vmontantLocation + vmontantOption;

        -- On calcule la remise
        select count(*) into vnblocations from reservation where vnumRes = numRes;

        if(vnblocations mod 3) = 0  then
            vmontantTotale := vmontantTotale/15;
            vremise := 1;
        else vremise := 0;
        end if;

        -- On calcule le montant TTC
        vmontantTTC := vmontantTotale * 20;

        insert into facture values(vnumFacture, vmontantLocation, vmontantOption, vmontantTotale, vremise, vmontantTTC, 'en cours', sysdate, vnumRes);
    end if;  

EXCEPTION
when ReservationInconnue then 
    dbms_output.put_line('La reservation n existe pas');
when FactureExistante then 
    dbms_output.put_line('La reservation a deja une facture');
END ajouterFacture;





























CREATE OR REPLACE PROCEDURE inserer_facture (
p_num_reservation reservation.numRes%type
) IS
v_num_facture char;
v_montant_location number(9, 2);
v_montant_option number(9, 2) := 0;
v_montant_total number(9, 2);
v_montant_ttc number(9, 2);
v_remise number;
v_nb_reservations number;
v_nb_options number;
v_nb_factures number;
ex_facture_existe_deja exception;
ex_reservation_inconnue exception;

BEGIN
-- Vérifie si une facture existe déjà pour la réservation donnée
SELECT COUNT(*) INTO v_nb_factures
FROM facture
WHERE numRes = p_num_reservation;
IF v_nb_factures != 0 THEN
    RAISE ex_facture_existe_deja;
END IF;

-- Vérifie si la réservation existe
SELECT COUNT(*) INTO v_nb_reservations
FROM reservation
WHERE numRes = p_num_reservation;

-- Si la réservation existe, on récupère toutes les informations nécessaires
IF v_nb_reservations = 0 THEN
    RAISE ex_reservation_inconnue;
ELSE 
    -- Attribue un numéro de facture
    SELECT MAX(numFact) + 1 INTO v_num_facture
    FROM facture;

    -- Calcule le montant de l'hébergement
    SELECT montant_hebergement(p_num_reservation) INTO v_montant_location
    FROM reservation;

    -- Calcule le montant des options
    SELECT montOption INTO v_montant_option
    FROM choix_option
    WHERE numRes = p_num_reservation;

    -- Calcule le montant total
    v_montant_total := v_montant_location + v_montant_option;

    -- Calcule la remise
    SELECT COUNT(*) INTO v_nb_options
    from choix_option
    where numRes = p_num_reservation;

    if v_nb_options mod 3 = 0  then
        v_montant_total := v_montant_total / 15;
        v_remise := 1;
    else
        v_remise := 0;
    end if;

    -- Calcule le montant TTC
    v_montant_ttc := v_montant_total * 1.2;

    -- Insère la facture dans la base de données
    INSERT INTO facture VALUES (v_num_facture, v_montant_location, v_montant_option, v_montant_total, v_remise, v_montant_ttc, 'en cours', sysdate, p_num_reservation);
end if;  
EXCEPTION
When ex_reservation_inconnue then
dbms_output.put_line('La réservation nexiste pas.');
When ex_facture_existe_deja then
dbms_output.put_line('La réservation a déjà une facture.');
END;














CREATE OR REPLACE
PROCEDURE ajouterFacture(v_num_reservation reservation.numRes%type)
IS
    v_num_facture CHAR;
    v_montant_option NUMBER(9, 2);
    v_montant_location NUMBER(9, 2);
    v_montant_total NUMBER(9, 2);
    v_montant_ttc NUMBER(9, 2);
    v_nb_factures_existante NUMBER;
    v_nb_reservations_pour_remise NUMBER;
    v_nb_reservations NUMBER;
    v_remise NUMBER;

    
    FactureExistante EXCEPTION;
    ReservationInconnue EXCEPTION;

BEGIN
    -- Vérifie si la réservation a déjà une facture  
    SELECT COUNT(*) INTO v_nb_factures_existante
    FROM facture
    WHERE numRes = v_num_reservation;

    if v_nb_factures_existante != 0 then
        raise FactureExistante;
    end if;

    -- Vérifie si la réservation existe
    SELECT count(*) INTO v_nb_reservations from reservation where numRes = v_num_reservation;

    -- Si la réservation existe alors on récupère toutes les informations
    if v_nb_reservations = 0 then
        raise ReservationInconnue;
    else
        -- Le nouveau numéro de facture
        SELECT MAX(numFact) + 1 into v_num_facture from facture;
        
        -- montant des options
        SELECT montOption(v_num_reservation) into v_montant_option from choixOption;

        -- montant de l'hébergement
        SELECT montHebergement(v_num_reservation) into v_montant_location from reservation;

        -- On calcule le montant total
        v_montant_total := v_montant_location + v_montant_option;

        -- On calcule la remise
        SELECT COUNT(*) into v_nb_reservations_pour_remise from reservation where v_num_reservation = numRes;

        if (v_nb_reservations_pour_remise mod 3) = 0 then
            v_montant_total := v_montant_total/15;
            v_remise := 1;
        else
            v_remise := 0;
        end if;

        -- On calcule le montant TTC
        v_montant_ttc := v_montant_total * 20;

        INSERT INTO facture VALUES(v_num_facture, v_montant_location, v_montant_option, v_montant_total, v_remise, v_montant_ttc, 'en cours', SYSDATE, v_num_reservation);
    end if; 

EXCEPTION
    When ReservationInconnue then 
        dbms_output.put_line('La réservation nexiste pas');
    When FactureExistante then
        dbms_output.put_line('La réservation a déjà une facture');
END ajouterFacture;

